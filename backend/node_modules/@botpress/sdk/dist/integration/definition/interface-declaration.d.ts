import { AnyZodObject, GenericZuiSchema, ZodRef } from '../../zui';
import { BaseActions, BaseChannels, BaseEntities, BaseEvents } from './generic';
import { EntityDefinition, InterfaceImplementationStatement, ResolvedInterface } from './types';
type EntityReferences<TEntities extends BaseEntities> = {
    [K in keyof TEntities]: ZodRef;
};
type GenericEventDefinition<TEntities extends BaseEntities, TEvent extends BaseEvents[string] = BaseEvents[string]> = {
    schema: GenericZuiSchema<EntityReferences<TEntities>, TEvent>;
};
type GenericChannelDefinition<TEntities extends BaseEntities, TChannel extends BaseChannels[string] = BaseChannels[string]> = {
    messages: {
        [K in keyof TChannel]: {
            schema: GenericZuiSchema<EntityReferences<TEntities>, TChannel[K]>;
        };
    };
};
type GenericActionDefinition<TEntities extends BaseEntities, TAction extends BaseActions[string] = BaseActions[string]> = {
    input: {
        schema: GenericZuiSchema<EntityReferences<TEntities>, TAction>;
    };
    output: {
        schema: GenericZuiSchema<EntityReferences<TEntities>, AnyZodObject>;
    };
};
export type InterfaceTemplateNameProps<TEntities extends BaseEntities = BaseEntities> = {
    [K in keyof TEntities]: string;
};
export type InterfaceDeclarationProps<TEntities extends BaseEntities = BaseEntities, TActions extends BaseActions = BaseActions, TEvents extends BaseEntities = BaseEntities, TChannels extends BaseChannels = BaseChannels> = {
    name: string;
    version: string;
    entities?: {
        [K in keyof TEntities]: EntityDefinition<TEntities[K]>;
    };
    events?: {
        [K in keyof TEvents]: GenericEventDefinition<TEntities, TEvents[K]>;
    };
    actions?: {
        [K in keyof TActions]: GenericActionDefinition<TEntities, TActions[K]>;
    };
    channels?: {
        [K in keyof TChannels]: GenericChannelDefinition<TEntities, TChannels[K]>;
    };
    templateName?: (name: string, props: InterfaceTemplateNameProps<TEntities>) => string;
};
export type InterfaceResolveInput<TEntities extends BaseEntities = BaseEntities> = {
    entities: {
        [K in keyof TEntities]: {
            name: string;
            schema: TEntities[K];
        };
    };
};
export type InterfaceResolveOutput<TActions extends BaseActions = BaseActions, TEvents extends BaseEvents = BaseEvents> = {
    resolved: ResolvedInterface<TActions, TEvents>;
    implementStatement: InterfaceImplementationStatement;
};
export declare class InterfaceDeclaration<TEntities extends BaseEntities = BaseEntities, TActions extends BaseActions = BaseActions, TEvents extends BaseEvents = BaseEvents> {
    readonly props: InterfaceDeclarationProps<TEntities, TActions, TEvents>;
    readonly name: this['props']['name'];
    readonly version: this['props']['version'];
    readonly entities: NonNullable<this['props']['entities']>;
    readonly events: NonNullable<this['props']['events']>;
    readonly actions: NonNullable<this['props']['actions']>;
    readonly channels: NonNullable<this['props']['channels']>;
    readonly templateName: this['props']['templateName'];
    constructor(props: InterfaceDeclarationProps<TEntities, TActions, TEvents>);
    resolve(props: InterfaceResolveInput<TEntities>): InterfaceResolveOutput<TActions, TEvents>;
    private _dereference;
    private _rename;
}
export {};
