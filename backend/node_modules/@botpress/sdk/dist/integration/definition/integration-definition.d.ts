import { z } from '../../zui';
import { SchemaStore, BrandedSchema } from './branded-schema';
import { BaseConfig, BaseEvents, BaseActions, BaseChannels, BaseStates, BaseEntities } from './generic';
import { InterfaceDeclaration } from './interface-declaration';
import { ConfigurationDefinition, EventDefinition, ChannelDefinition, ActionDefinition, StateDefinition, UserDefinition, SecretDefinition, EntityDefinition, InterfaceImplementationStatement } from './types';
export type IntegrationDefinitionProps<TConfig extends BaseConfig = BaseConfig, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TChannels extends BaseChannels = BaseChannels, TStates extends BaseStates = BaseStates, TEntities extends BaseEntities = BaseEntities> = {
    name: string;
    version: string;
    title?: string;
    description?: string;
    icon?: string;
    readme?: string;
    identifier?: {
        extractScript?: string;
        fallbackHandlerScript?: string;
    };
    configuration?: ConfigurationDefinition<TConfig>;
    events?: {
        [K in keyof TEvents]: EventDefinition<TEvents[K]>;
    };
    actions?: {
        [K in keyof TActions]: ActionDefinition<TActions[K]>;
    };
    channels?: {
        [K in keyof TChannels]: ChannelDefinition<TChannels[K]>;
    };
    states?: {
        [K in keyof TStates]: StateDefinition<TStates[K]>;
    };
    user?: UserDefinition;
    secrets?: Record<string, SecretDefinition>;
    entities?: {
        [K in keyof TEntities]: EntityDefinition<TEntities[K]>;
    };
};
type InterfaceTypeArguments<TInterfaceEntities extends BaseEntities> = {
    [K in keyof TInterfaceEntities]: BrandedSchema<z.ZodSchema<z.infer<TInterfaceEntities[K]>>>;
};
type ExtensionBuilder<TIntegrationEntities extends BaseEntities, TInterfaceEntities extends BaseEntities> = (input: SchemaStore<TIntegrationEntities>) => InterfaceTypeArguments<TInterfaceEntities>;
export declare class IntegrationDefinition<TConfig extends BaseConfig = BaseConfig, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TChannels extends BaseChannels = BaseChannels, TStates extends BaseStates = BaseStates, TEntities extends BaseEntities = BaseEntities> {
    readonly props: IntegrationDefinitionProps<TConfig, TEvents, TActions, TChannels, TStates, TEntities>;
    readonly name: this['props']['name'];
    readonly version: this['props']['version'];
    readonly title: this['props']['title'];
    readonly description: this['props']['description'];
    readonly icon: this['props']['icon'];
    readonly readme: this['props']['readme'];
    readonly configuration: this['props']['configuration'];
    readonly events: this['props']['events'];
    readonly actions: this['props']['actions'];
    readonly channels: this['props']['channels'];
    readonly states: this['props']['states'];
    readonly user: this['props']['user'];
    readonly secrets: this['props']['secrets'];
    readonly identifier: this['props']['identifier'];
    readonly entities: this['props']['entities'];
    readonly interfaces: Record<string, InterfaceImplementationStatement>;
    constructor(props: IntegrationDefinitionProps<TConfig, TEvents, TActions, TChannels, TStates, TEntities>);
    clone(props: Partial<IntegrationDefinitionProps<TConfig, TEvents, TActions, TChannels, TStates, TEntities>>): IntegrationDefinition<TConfig, TEvents, TActions, TChannels, TStates, TEntities>;
    extend<E extends BaseEntities>(interfaceDeclaration: InterfaceDeclaration<E>, builder: ExtensionBuilder<TEntities, E>): this;
    private _mergeActions;
    private _mergeEvents;
    private _mergeChannels;
    private _mergeMessage;
}
export {};
