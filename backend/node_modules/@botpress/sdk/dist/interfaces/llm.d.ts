import { InterfaceDeclaration } from '../integration/definition';
import z from '../zui';
declare const ToolCallSchema: import("@bpinternal/zui").ZodObject<{
    id: import("@bpinternal/zui").ZodString;
    type: import("@bpinternal/zui").ZodEnum<["function"]>;
    function: import("@bpinternal/zui").ZodObject<{
        name: import("@bpinternal/zui").ZodString;
        arguments: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodRecord<import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodAny>>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        name: string;
        arguments: Record<string, any> | null;
    }, {
        name: string;
        arguments: Record<string, any> | null;
    }>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    function: {
        name: string;
        arguments: Record<string, any> | null;
    };
    type: "function";
    id: string;
}, {
    function: {
        name: string;
        arguments: Record<string, any> | null;
    };
    type: "function";
    id: string;
}>;
declare const MessageSchema: import("@bpinternal/zui").ZodObject<{
    role: import("@bpinternal/zui").ZodEnum<["user", "assistant"]>;
    type: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodEnum<["text", "tool_calls", "tool_result", "multipart"]>>;
    toolCalls: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
        id: import("@bpinternal/zui").ZodString;
        type: import("@bpinternal/zui").ZodEnum<["function"]>;
        function: import("@bpinternal/zui").ZodObject<{
            name: import("@bpinternal/zui").ZodString;
            arguments: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodRecord<import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodAny>>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            name: string;
            arguments: Record<string, any> | null;
        }, {
            name: string;
            arguments: Record<string, any> | null;
        }>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        function: {
            name: string;
            arguments: Record<string, any> | null;
        };
        type: "function";
        id: string;
    }, {
        function: {
            name: string;
            arguments: Record<string, any> | null;
        };
        type: "function";
        id: string;
    }>, "many">>;
    toolResultCallId: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    content: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodUnion<[import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
        type: import("@bpinternal/zui").ZodEnum<["text", "image"]>;
        mimeType: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        text: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        url: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        type: "text" | "image";
        text?: string | undefined;
        url?: string | undefined;
        mimeType?: string | undefined;
    }, {
        type: "text" | "image";
        text?: string | undefined;
        url?: string | undefined;
        mimeType?: string | undefined;
    }>, "many">]>>>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    type: "text" | "tool_calls" | "tool_result" | "multipart";
    role: "user" | "assistant";
    toolCalls?: {
        function: {
            name: string;
            arguments: Record<string, any> | null;
        };
        type: "function";
        id: string;
    }[] | undefined;
    toolResultCallId?: string | undefined;
    content?: string | {
        type: "text" | "image";
        text?: string | undefined;
        url?: string | undefined;
        mimeType?: string | undefined;
    }[] | null | undefined;
}, {
    role: "user" | "assistant";
    type?: "text" | "tool_calls" | "tool_result" | "multipart" | undefined;
    toolCalls?: {
        function: {
            name: string;
            arguments: Record<string, any> | null;
        };
        type: "function";
        id: string;
    }[] | undefined;
    toolResultCallId?: string | undefined;
    content?: string | {
        type: "text" | "image";
        text?: string | undefined;
        url?: string | undefined;
        mimeType?: string | undefined;
    }[] | null | undefined;
}>;
declare const ModelSchema: import("@bpinternal/zui").ZodObject<{
    id: import("@bpinternal/zui").ZodString;
    name: import("@bpinternal/zui").ZodString;
    input: import("@bpinternal/zui").ZodObject<{
        maxTokens: import("@bpinternal/zui").ZodNumber;
        costPer1MTokens: import("@bpinternal/zui").ZodNumber;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        maxTokens: number;
        costPer1MTokens: number;
    }, {
        maxTokens: number;
        costPer1MTokens: number;
    }>;
    output: import("@bpinternal/zui").ZodObject<{
        maxTokens: import("@bpinternal/zui").ZodNumber;
        costPer1MTokens: import("@bpinternal/zui").ZodNumber;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        maxTokens: number;
        costPer1MTokens: number;
    }, {
        maxTokens: number;
        costPer1MTokens: number;
    }>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    id: string;
    name: string;
    input: {
        maxTokens: number;
        costPer1MTokens: number;
    };
    output: {
        maxTokens: number;
        costPer1MTokens: number;
    };
}, {
    id: string;
    name: string;
    input: {
        maxTokens: number;
        costPer1MTokens: number;
    };
    output: {
        maxTokens: number;
        costPer1MTokens: number;
    };
}>;
declare const GenerateContentInputBaseSchema: import("@bpinternal/zui").ZodObject<{
    model: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{
        id: import("@bpinternal/zui").ZodString;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    systemPrompt: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    messages: import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
        role: import("@bpinternal/zui").ZodEnum<["user", "assistant"]>;
        type: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodEnum<["text", "tool_calls", "tool_result", "multipart"]>>;
        toolCalls: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
            id: import("@bpinternal/zui").ZodString;
            type: import("@bpinternal/zui").ZodEnum<["function"]>;
            function: import("@bpinternal/zui").ZodObject<{
                name: import("@bpinternal/zui").ZodString;
                arguments: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodRecord<import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodAny>>;
            }, "strip", import("@bpinternal/zui").ZodTypeAny, {
                name: string;
                arguments: Record<string, any> | null;
            }, {
                name: string;
                arguments: Record<string, any> | null;
            }>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }>, "many">>;
        toolResultCallId: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        content: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodUnion<[import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
            type: import("@bpinternal/zui").ZodEnum<["text", "image"]>;
            mimeType: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
            text: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
            url: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }, {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }>, "many">]>>>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        type: "text" | "tool_calls" | "tool_result" | "multipart";
        role: "user" | "assistant";
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }, {
        role: "user" | "assistant";
        type?: "text" | "tool_calls" | "tool_result" | "multipart" | undefined;
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }>, "many">;
    responseFormat: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodEnum<["text", "json_object"]>>;
    maxTokens: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodNumber>;
    temperature: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodNumber>;
    topP: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodNumber>;
    stopSequences: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodString, "many">>;
    tools: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
        type: import("@bpinternal/zui").ZodLiteral<"function">;
        function: import("@bpinternal/zui").ZodObject<{
            name: import("@bpinternal/zui").ZodString;
            description: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
            argumentsSchema: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{}, "passthrough", import("@bpinternal/zui").ZodTypeAny, import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough">, import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough">>>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            name: string;
            description?: string | undefined;
            argumentsSchema?: import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
        }, {
            name: string;
            description?: string | undefined;
            argumentsSchema?: import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
        }>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        function: {
            name: string;
            description?: string | undefined;
            argumentsSchema?: import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
        };
        type: "function";
    }, {
        function: {
            name: string;
            description?: string | undefined;
            argumentsSchema?: import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
        };
        type: "function";
    }>, "many">>;
    toolChoice: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{
        type: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodEnum<["auto", "specific", "any", "none", ""]>>;
        functionName: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        type?: "" | "auto" | "specific" | "any" | "none" | undefined;
        functionName?: string | undefined;
    }, {
        type?: "" | "auto" | "specific" | "any" | "none" | undefined;
        functionName?: string | undefined;
    }>>;
    userId: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    debug: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodBoolean>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    messages: {
        type: "text" | "tool_calls" | "tool_result" | "multipart";
        role: "user" | "assistant";
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }[];
    temperature: number;
    topP: number;
    maxTokens?: number | undefined;
    model?: {
        id: string;
    } | undefined;
    systemPrompt?: string | undefined;
    responseFormat?: "text" | "json_object" | undefined;
    stopSequences?: string[] | undefined;
    tools?: {
        function: {
            name: string;
            description?: string | undefined;
            argumentsSchema?: import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
        };
        type: "function";
    }[] | undefined;
    toolChoice?: {
        type?: "" | "auto" | "specific" | "any" | "none" | undefined;
        functionName?: string | undefined;
    } | undefined;
    userId?: string | undefined;
    debug?: boolean | undefined;
}, {
    messages: {
        role: "user" | "assistant";
        type?: "text" | "tool_calls" | "tool_result" | "multipart" | undefined;
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }[];
    maxTokens?: number | undefined;
    model?: {
        id: string;
    } | undefined;
    systemPrompt?: string | undefined;
    responseFormat?: "text" | "json_object" | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    tools?: {
        function: {
            name: string;
            description?: string | undefined;
            argumentsSchema?: import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
        };
        type: "function";
    }[] | undefined;
    toolChoice?: {
        type?: "" | "auto" | "specific" | "any" | "none" | undefined;
        functionName?: string | undefined;
    } | undefined;
    userId?: string | undefined;
    debug?: boolean | undefined;
}>;
declare const GenerateContentOutputSchema: import("@bpinternal/zui").ZodObject<{
    id: import("@bpinternal/zui").ZodString;
    provider: import("@bpinternal/zui").ZodString;
    model: import("@bpinternal/zui").ZodString;
    choices: import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
        type: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodEnum<["text", "tool_calls", "tool_result", "multipart"]>>;
        toolCalls: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
            id: import("@bpinternal/zui").ZodString;
            type: import("@bpinternal/zui").ZodEnum<["function"]>;
            function: import("@bpinternal/zui").ZodObject<{
                name: import("@bpinternal/zui").ZodString;
                arguments: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodRecord<import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodAny>>;
            }, "strip", import("@bpinternal/zui").ZodTypeAny, {
                name: string;
                arguments: Record<string, any> | null;
            }, {
                name: string;
                arguments: Record<string, any> | null;
            }>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }>, "many">>;
        toolResultCallId: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        content: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodUnion<[import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
            type: import("@bpinternal/zui").ZodEnum<["text", "image"]>;
            mimeType: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
            text: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
            url: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }, {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }>, "many">]>>>;
        role: import("@bpinternal/zui").ZodLiteral<"assistant">;
        index: import("@bpinternal/zui").ZodNumber;
        stopReason: import("@bpinternal/zui").ZodEnum<["stop", "max_tokens", "tool_calls", "content_filter", "other"]>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        type: "text" | "tool_calls" | "tool_result" | "multipart";
        role: "assistant";
        index: number;
        stopReason: "tool_calls" | "stop" | "max_tokens" | "content_filter" | "other";
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }, {
        role: "assistant";
        index: number;
        stopReason: "tool_calls" | "stop" | "max_tokens" | "content_filter" | "other";
        type?: "text" | "tool_calls" | "tool_result" | "multipart" | undefined;
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }>, "many">;
    usage: import("@bpinternal/zui").ZodObject<{
        inputTokens: import("@bpinternal/zui").ZodNumber;
        inputCost: import("@bpinternal/zui").ZodNumber;
        outputTokens: import("@bpinternal/zui").ZodNumber;
        outputCost: import("@bpinternal/zui").ZodNumber;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        inputTokens: number;
        inputCost: number;
        outputTokens: number;
        outputCost: number;
    }, {
        inputTokens: number;
        inputCost: number;
        outputTokens: number;
        outputCost: number;
    }>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    id: string;
    model: string;
    provider: string;
    choices: {
        type: "text" | "tool_calls" | "tool_result" | "multipart";
        role: "assistant";
        index: number;
        stopReason: "tool_calls" | "stop" | "max_tokens" | "content_filter" | "other";
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }[];
    usage: {
        inputTokens: number;
        inputCost: number;
        outputTokens: number;
        outputCost: number;
    };
}, {
    id: string;
    model: string;
    provider: string;
    choices: {
        role: "assistant";
        index: number;
        stopReason: "tool_calls" | "stop" | "max_tokens" | "content_filter" | "other";
        type?: "text" | "tool_calls" | "tool_result" | "multipart" | undefined;
        toolCalls?: {
            function: {
                name: string;
                arguments: Record<string, any> | null;
            };
            type: "function";
            id: string;
        }[] | undefined;
        toolResultCallId?: string | undefined;
        content?: string | {
            type: "text" | "image";
            text?: string | undefined;
            url?: string | undefined;
            mimeType?: string | undefined;
        }[] | null | undefined;
    }[];
    usage: {
        inputTokens: number;
        inputCost: number;
        outputTokens: number;
        outputCost: number;
    };
}>;
export declare const llm: InterfaceDeclaration<{
    modelRef: import("@bpinternal/zui").ZodObject<{
        id: import("@bpinternal/zui").ZodString;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, {
    generateContent: import("@bpinternal/zui").ZodObject<{
        model: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodRef>;
        systemPrompt: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        messages: import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
            role: import("@bpinternal/zui").ZodEnum<["user", "assistant"]>;
            type: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodEnum<["text", "tool_calls", "tool_result", "multipart"]>>;
            toolCalls: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
                id: import("@bpinternal/zui").ZodString;
                type: import("@bpinternal/zui").ZodEnum<["function"]>;
                function: import("@bpinternal/zui").ZodObject<{
                    name: import("@bpinternal/zui").ZodString;
                    arguments: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodRecord<import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodAny>>;
                }, "strip", import("@bpinternal/zui").ZodTypeAny, {
                    name: string;
                    arguments: Record<string, any> | null;
                }, {
                    name: string;
                    arguments: Record<string, any> | null;
                }>;
            }, "strip", import("@bpinternal/zui").ZodTypeAny, {
                function: {
                    name: string;
                    arguments: Record<string, any> | null;
                };
                type: "function";
                id: string;
            }, {
                function: {
                    name: string;
                    arguments: Record<string, any> | null;
                };
                type: "function";
                id: string;
            }>, "many">>;
            toolResultCallId: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
            content: import("@bpinternal/zui").ZodNullable<import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodUnion<[import("@bpinternal/zui").ZodString, import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
                type: import("@bpinternal/zui").ZodEnum<["text", "image"]>;
                mimeType: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
                text: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
                url: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
            }, "strip", import("@bpinternal/zui").ZodTypeAny, {
                type: "text" | "image";
                text?: string | undefined;
                url?: string | undefined;
                mimeType?: string | undefined;
            }, {
                type: "text" | "image";
                text?: string | undefined;
                url?: string | undefined;
                mimeType?: string | undefined;
            }>, "many">]>>>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            type: "text" | "tool_calls" | "tool_result" | "multipart";
            role: "user" | "assistant";
            toolCalls?: {
                function: {
                    name: string;
                    arguments: Record<string, any> | null;
                };
                type: "function";
                id: string;
            }[] | undefined;
            toolResultCallId?: string | undefined;
            content?: string | {
                type: "text" | "image";
                text?: string | undefined;
                url?: string | undefined;
                mimeType?: string | undefined;
            }[] | null | undefined;
        }, {
            role: "user" | "assistant";
            type?: "text" | "tool_calls" | "tool_result" | "multipart" | undefined;
            toolCalls?: {
                function: {
                    name: string;
                    arguments: Record<string, any> | null;
                };
                type: "function";
                id: string;
            }[] | undefined;
            toolResultCallId?: string | undefined;
            content?: string | {
                type: "text" | "image";
                text?: string | undefined;
                url?: string | undefined;
                mimeType?: string | undefined;
            }[] | null | undefined;
        }>, "many">;
        responseFormat: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodEnum<["text", "json_object"]>>;
        maxTokens: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodNumber>;
        temperature: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodNumber>;
        topP: import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodNumber>;
        stopSequences: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodString, "many">>;
        tools: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
            type: import("@bpinternal/zui").ZodLiteral<"function">;
            function: import("@bpinternal/zui").ZodObject<{
                name: import("@bpinternal/zui").ZodString;
                description: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
                argumentsSchema: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{}, "passthrough", import("@bpinternal/zui").ZodTypeAny, import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough">, import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough">>>;
            }, "strip", import("@bpinternal/zui").ZodTypeAny, {
                name: string;
                description?: string | undefined;
                argumentsSchema?: import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
            }, {
                name: string;
                description?: string | undefined;
                argumentsSchema?: import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
            }>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            function: {
                name: string;
                description?: string | undefined;
                argumentsSchema?: import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }, {
            function: {
                name: string;
                description?: string | undefined;
                argumentsSchema?: import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }>, "many">>;
        toolChoice: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{
            type: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodEnum<["auto", "specific", "any", "none", ""]>>;
            functionName: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        }, "strip", import("@bpinternal/zui").ZodTypeAny, {
            type?: "" | "auto" | "specific" | "any" | "none" | undefined;
            functionName?: string | undefined;
        }, {
            type?: "" | "auto" | "specific" | "any" | "none" | undefined;
            functionName?: string | undefined;
        }>>;
        userId: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        debug: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodBoolean>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        messages: {
            type: "text" | "tool_calls" | "tool_result" | "multipart";
            role: "user" | "assistant";
            toolCalls?: {
                function: {
                    name: string;
                    arguments: Record<string, any> | null;
                };
                type: "function";
                id: string;
            }[] | undefined;
            toolResultCallId?: string | undefined;
            content?: string | {
                type: "text" | "image";
                text?: string | undefined;
                url?: string | undefined;
                mimeType?: string | undefined;
            }[] | null | undefined;
        }[];
        temperature: number;
        topP: number;
        maxTokens?: number | undefined;
        model?: {} | undefined;
        systemPrompt?: string | undefined;
        responseFormat?: "text" | "json_object" | undefined;
        stopSequences?: string[] | undefined;
        tools?: {
            function: {
                name: string;
                description?: string | undefined;
                argumentsSchema?: import("@bpinternal/zui").objectOutputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }[] | undefined;
        toolChoice?: {
            type?: "" | "auto" | "specific" | "any" | "none" | undefined;
            functionName?: string | undefined;
        } | undefined;
        userId?: string | undefined;
        debug?: boolean | undefined;
    }, {
        messages: {
            role: "user" | "assistant";
            type?: "text" | "tool_calls" | "tool_result" | "multipart" | undefined;
            toolCalls?: {
                function: {
                    name: string;
                    arguments: Record<string, any> | null;
                };
                type: "function";
                id: string;
            }[] | undefined;
            toolResultCallId?: string | undefined;
            content?: string | {
                type: "text" | "image";
                text?: string | undefined;
                url?: string | undefined;
                mimeType?: string | undefined;
            }[] | null | undefined;
        }[];
        maxTokens?: number | undefined;
        model?: {} | undefined;
        systemPrompt?: string | undefined;
        responseFormat?: "text" | "json_object" | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        tools?: {
            function: {
                name: string;
                description?: string | undefined;
                argumentsSchema?: import("@bpinternal/zui").objectInputType<{}, import("@bpinternal/zui").ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }[] | undefined;
        toolChoice?: {
            type?: "" | "auto" | "specific" | "any" | "none" | undefined;
            functionName?: string | undefined;
        } | undefined;
        userId?: string | undefined;
        debug?: boolean | undefined;
    }>;
    listLanguageModels: import("@bpinternal/zui").ZodObject<{}, "strip", import("@bpinternal/zui").ZodTypeAny, {}, {}>;
}, import("../integration/definition/generic").BaseEvents>;
export declare namespace llm {
    type GenerateContentInput = z.infer<typeof GenerateContentInputBaseSchema>;
    type GenerateContentOutput = z.infer<typeof GenerateContentOutputSchema>;
    type ToolCall = z.infer<typeof ToolCallSchema>;
    type Message = z.infer<typeof MessageSchema>;
    type Model = z.infer<typeof ModelSchema>;
    type ModelDetails = Omit<Model, 'id'>;
}
export {};
