import { InterfaceDeclaration } from '../integration/definition';
import z from '../zui';
declare const SpeechToTextModelSchema: import("@bpinternal/zui").ZodObject<{
    id: import("@bpinternal/zui").ZodString;
    name: import("@bpinternal/zui").ZodString;
    costPerMinute: import("@bpinternal/zui").ZodNumber;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    id: string;
    name: string;
    costPerMinute: number;
}, {
    id: string;
    name: string;
    costPerMinute: number;
}>;
declare const TranscribeAudioBaseSchema: import("@bpinternal/zui").ZodObject<{
    model: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{
        id: import("@bpinternal/zui").ZodString;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    fileUrl: import("@bpinternal/zui").ZodString;
    language: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    prompt: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    temperature: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodNumber>>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    fileUrl: string;
    model?: {
        id: string;
    } | undefined;
    temperature?: number | undefined;
    prompt?: string | undefined;
    language?: string | undefined;
}, {
    fileUrl: string;
    model?: {
        id: string;
    } | undefined;
    temperature?: number | undefined;
    prompt?: string | undefined;
    language?: string | undefined;
}>;
declare const TranscribeAudioOutputSchema: import("@bpinternal/zui").ZodObject<{
    language: import("@bpinternal/zui").ZodString;
    duration: import("@bpinternal/zui").ZodNumber;
    segments: import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodObject<{
        text: import("@bpinternal/zui").ZodString;
        id: import("@bpinternal/zui").ZodNumber;
        seek: import("@bpinternal/zui").ZodNumber;
        start: import("@bpinternal/zui").ZodNumber;
        end: import("@bpinternal/zui").ZodNumber;
        tokens: import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodNumber, "many">;
        temperature: import("@bpinternal/zui").ZodNumber;
        avg_logprob: import("@bpinternal/zui").ZodNumber;
        compression_ratio: import("@bpinternal/zui").ZodNumber;
        no_speech_prob: import("@bpinternal/zui").ZodNumber;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        text: string;
        id: number;
        temperature: number;
        seek: number;
        start: number;
        end: number;
        tokens: number[];
        avg_logprob: number;
        compression_ratio: number;
        no_speech_prob: number;
    }, {
        text: string;
        id: number;
        temperature: number;
        seek: number;
        start: number;
        end: number;
        tokens: number[];
        avg_logprob: number;
        compression_ratio: number;
        no_speech_prob: number;
    }>, "many">;
    model: import("@bpinternal/zui").ZodString;
    cost: import("@bpinternal/zui").ZodNumber;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    model: string;
    cost: number;
    language: string;
    duration: number;
    segments: {
        text: string;
        id: number;
        temperature: number;
        seek: number;
        start: number;
        end: number;
        tokens: number[];
        avg_logprob: number;
        compression_ratio: number;
        no_speech_prob: number;
    }[];
}, {
    model: string;
    cost: number;
    language: string;
    duration: number;
    segments: {
        text: string;
        id: number;
        temperature: number;
        seek: number;
        start: number;
        end: number;
        tokens: number[];
        avg_logprob: number;
        compression_ratio: number;
        no_speech_prob: number;
    }[];
}>;
export declare const speechToText: InterfaceDeclaration<{
    speechToTextModelRef: import("@bpinternal/zui").ZodObject<{
        id: import("@bpinternal/zui").ZodString;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, {
    transcribeAudio: import("@bpinternal/zui").ZodObject<{
        model: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodRef>;
        fileUrl: import("@bpinternal/zui").ZodString;
        language: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        prompt: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        temperature: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodDefault<import("@bpinternal/zui").ZodNumber>>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        fileUrl: string;
        model?: {} | undefined;
        temperature?: number | undefined;
        prompt?: string | undefined;
        language?: string | undefined;
    }, {
        fileUrl: string;
        model?: {} | undefined;
        temperature?: number | undefined;
        prompt?: string | undefined;
        language?: string | undefined;
    }>;
    listSpeechToTextModels: import("@bpinternal/zui").ZodObject<{}, "strip", import("@bpinternal/zui").ZodTypeAny, {}, {}>;
}, import("../integration/definition/generic").BaseEvents>;
export declare namespace speechToText {
    type TranscribeAudioInputSchema = z.infer<typeof TranscribeAudioBaseSchema>;
    type TranscribeAudioOutputSchema = z.infer<typeof TranscribeAudioOutputSchema>;
    type SpeechToTextModel = z.infer<typeof SpeechToTextModelSchema>;
    type SpeechToTextModelDetails = Omit<SpeechToTextModel, 'id'>;
}
export {};
